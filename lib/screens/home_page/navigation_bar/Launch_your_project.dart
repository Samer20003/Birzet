import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';

import '../../../constants.dart';
import '../MyAccount.dart';
import 'AIChat.dart';
import 'Chat.dart';
import 'Courses.dart';
import 'FirstStepOfJourney.dart';
import 'Ideas.dart';
import 'Projects.dart';
import 'Success_stories.dart';
import 'WhoWeAre.dart';
import 'home_page_screen.dart';

class LaunchProjectScreen extends StatefulWidget {
  @override
  _LaunchProjectScreenState createState() => _LaunchProjectScreenState();
}

class _LaunchProjectScreenState extends State<LaunchProjectScreen> {
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();
  bool _isHoveringProfile = false;
  bool _isHoveringNotifications = false;
  bool _isHoveringSearch = false;
  bool _isHoveringContact = false;
  bool _isHoveringSuccessStories = false;
  bool _isHoveringLaunchProject = false;
  bool _isHoveringIncubator = false;
  bool _isHoveringAboutUs = false;
  bool _isHoveringHome = false;
  String? selectedContactValue;
  String? selectedValue;
  TextEditingController _searchController = TextEditingController();
  bool _isSearching = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      appBar: AppBar(
        backgroundColor: Color(0xFF0A1D47),
      ),
      drawer: _buildDrawer(),
      body: SingleChildScrollView(
        child: Column(
          children: [
            _buildHeader(),
            _buildNavigationBar(),
            const SizedBox(height: 40),
            _buildLaunchJourneySection(),
            const SizedBox(height: 40),
            _buildFooter(),
          ],
        ),
      ),
    );
  }

  Widget _buildDrawer() {
    return Drawer(
      child: ListView(
        padding: EdgeInsets.zero,
        children: [
          const DrawerHeader(
            decoration: BoxDecoration(color: Colors.grey),
            child: Text(
              'ÿ≠ÿ≥ÿßÿ®Ÿä',
              style: TextStyle(
                color: Colors.white,
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          ListTile(
            title: const Text('ÿ≠ÿ≥ÿßÿ®Ÿä'),
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => const ProfileScreen()),
              );
            },
          ),
          ListTile(
            title: const Text('ŸÖÿ¥ÿßÿ±ŸäÿπŸä ÿßŸÑŸÜÿßÿ¥ÿ¶ÿ©'),
            onTap: () {
              Navigator.pop(context);
            },
          ),
          ListTile(
            title: const Text('ÿ≥ÿ¨ŸÑ ÿßŸÑŸÜÿ¥ÿßÿ∑ÿßÿ™'),
            onTap: () {
              Navigator.pop(context);
            },
          ),
          ListTile(
            title: const Text('ÿßŸÅŸÉÿßÿ±Ÿä'),
            onTap: () {
              Navigator.pop(context);
            },
          ),
          ListTile(
            title: const Text('ÿßÿ≥ÿ™ÿ´ŸÖÿßÿ±ÿßÿ™Ÿä'),
            onTap: () {
              Navigator.pop(context);
            },
          ),
          ListTile(
            title: const Text('ÿ™ÿ≥ÿ¨ŸäŸÑ ÿÆÿ±Ÿàÿ¨'),
            onTap: () {
              Navigator.pop(context);
            },
          ),
        ],
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      width: double.infinity,
      height: 80,
      color: Color(0xFF0A1D47),
      padding: const EdgeInsets.all(2.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          ClipRRect(
            borderRadius: BorderRadius.circular(8.0),
            child: Image.asset(
              'assets/images/image500500.png',
              width: 170,
              height: 170,
              fit: BoxFit.cover,
            ),
          ),
          const Text(
            'ÿ≠ÿßÿ∂ŸÜÿ© ÿ≥ÿ™ÿßÿ±ÿ™ ÿ£ÿ®',
            style: TextStyle(
              color: Colors.white,
              fontSize: 24,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildNavigationBar() {
    return Container(
      width: double.infinity,
      color: Colors.grey[200],
      padding: const EdgeInsets.all(12.0),
      child: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.start,
                children: [
                  _buildIcon(
                    'üë§',
                    _isHoveringProfile,
                        () {
                      _scaffoldKey.currentState?.openDrawer();
                    },
                        (hovering) => setState(() {
                      _isHoveringProfile = hovering;
                    }),
                  ),
                  const SizedBox(width: 16),
                  _buildIcon(
                    'üîî',
                    _isHoveringNotifications,
                        () {
                      // Ÿàÿ∏ŸäŸÅÿ© ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™
                    },
                        (hovering) => setState(() {
                      _isHoveringNotifications = hovering;
                    }),
                  ),
                  const SizedBox(width: 16),
                  _buildIcon(
                    'üîç',
                    _isHoveringSearch,
                    _startSearch,
                        (hovering) => setState(() {
                      _isHoveringSearch = hovering;
                    }),
                  ),
                ],
              ),
              const Spacer(),
              Row(
                children: [
                  // ÿ™ŸàÿßÿµŸÑ ŸÖÿπŸÜÿß
                  MouseRegion(
                    onEnter: (_) => setState(() {
                      _isHoveringContact = true;
                    }),
                    onExit: (_) => setState(() {
                      _isHoveringContact = false;
                    }),
                    child: DropdownButtonHideUnderline(
                      child: DropdownButton<String>(
                        value: selectedContactValue,
                        hint: Text(
                          'ÿ™ŸàÿßÿµŸÑ ŸÖÿπŸÜÿß',
                          style: TextStyle(
                            color: _isHoveringContact ? Colors.orangeAccent : Colors.black,
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        onChanged: (String? newValue) {
                          setState(() {
                            selectedContactValue = newValue;

                            if (newValue == 'ÿØÿ±ÿØÿ¥ÿ© ŸÖÿ®ÿßÿ¥ÿ±ÿ©') {
                              Navigator.push(context, MaterialPageRoute(builder: (context) => ChatScreen()));
                            } else if (newValue == 'ÿßÿ≥ÿ£ŸÑ AI') {
                              Navigator.push(context, MaterialPageRoute(builder: (context) => AIChatScreen()));
                            }
                          });
                        },
                        items: [
                          DropdownMenuItem(value: 'ÿØÿ±ÿØÿ¥ÿ© ŸÖÿ®ÿßÿ¥ÿ±ÿ©', child: Text('ÿØÿ±ÿØÿ¥ÿ© ŸÖÿ®ÿßÿ¥ÿ±ÿ©')),
                          DropdownMenuItem(value: 'ÿßÿ≥ÿ£ŸÑ AI', child: Text('ÿßÿ≥ÿ£ŸÑ AI')),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(width: 16),
                  _buildLink(
                    'ŸÇÿµÿµ ŸÜÿ¨ÿßÿ≠',
                    _isHoveringSuccessStories,
                        () {
                      Navigator.push(context, MaterialPageRoute(builder: (context) => SuccessStoriesScreen()));
                    },
                        (hovering) => setState(() {
                      _isHoveringSuccessStories = hovering;
                    }),
                  ),
                  const SizedBox(width: 16),
                  _buildLink(
                    'ÿ£ÿ∑ŸÑŸÇ ŸÖÿ¥ÿ±ŸàÿπŸÉ',
                    _isHoveringLaunchProject,
                        () {
                      Navigator.push(context, MaterialPageRoute(builder: (context) => LaunchProjectScreen()));
                    },
                        (hovering) => setState(() {
                      _isHoveringLaunchProject = hovering;
                    }),
                  ),
                  const SizedBox(width: 16),
                  // ÿ≠ÿßÿ∂ŸÜÿ© ÿ≥ÿ™ÿßÿ±ÿ™ ÿ£ÿ®
                  MouseRegion(
                    onEnter: (_) => setState(() {
                      _isHoveringIncubator = true;
                    }),
                    onExit: (_) => setState(() {
                      _isHoveringIncubator = false;
                    }),
                    child: DropdownButtonHideUnderline(
                      child: DropdownButton<String>(
                        value: selectedValue,
                        hint: Text(
                          'ÿ≠ÿßÿ∂ŸÜÿ© ÿ≥ÿ™ÿßÿ±ÿ™ ÿ£ÿ®',
                          style: TextStyle(
                            color: _isHoveringIncubator ? Colors.orangeAccent : Colors.black,
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        onChanged: (String? newValue) {
                          setState(() {
                            selectedValue = newValue;

                            if (newValue == 'ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ') {
                              Navigator.push(context, MaterialPageRoute(builder: (context) => ProjectsScreen()));
                            } else if (newValue == 'ÿßŸÑÿ£ŸÅŸÉÿßÿ±') {
                              Navigator.push(context, MaterialPageRoute(builder: (context) => IdeasScreen()));
                            } else if (newValue == 'ÿßŸÑÿØŸàÿ±ÿßÿ™') {
                              Navigator.push(context, MaterialPageRoute(builder: (context) => CoursesScreen()));
                            }
                          });
                        },
                        items: [
                          DropdownMenuItem(value: 'ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ', child: Text('ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ')),
                          DropdownMenuItem(value: 'ÿßŸÑÿ£ŸÅŸÉÿßÿ±', child: Text('ÿßŸÑÿ£ŸÅŸÉÿßÿ±')),
                          DropdownMenuItem(value: 'ÿßŸÑÿØŸàÿ±ÿßÿ™', child: Text('ÿßŸÑÿØŸàÿ±ÿßÿ™')),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(width: 16),
                  _buildLink(
                    'ŸÖŸÜ ŸÜÿ≠ŸÜ',
                    _isHoveringAboutUs,
                        () {
                      Navigator.push(context, MaterialPageRoute(builder: (context) => WhoWeAreScreen()));
                    },
                        (hovering) => setState(() {
                      _isHoveringAboutUs = hovering;
                    }),
                  ),
                  const SizedBox(width: 16),
                  _buildLink(
                    'ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©',
                    _isHoveringHome,
                        () {
                      Navigator.push(context, MaterialPageRoute(builder: (context) => homepagescreen()));
                    },
                        (hovering) => setState(() {
                      _isHoveringHome = hovering;
                    }),
                  ),
                ],
              ),
            ],
          ),
          const SizedBox(height: 20),
          if (_isSearching)
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: TextField(
                controller: _searchController,
                decoration: InputDecoration(
                  labelText: 'ÿßÿ®ÿ≠ÿ´ ÿπŸÜ...',
                  border: OutlineInputBorder(),
                  suffixIcon: IconButton(
                    icon: const Icon(Icons.clear),
                    onPressed: _stopSearch,
                  ),
                ),
                onSubmitted: (value) {
                  _stopSearch();
                },
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildIcon(String icon, bool isHovering, VoidCallback onTap, Function(bool) onHover) {
    return MouseRegion(
      onEnter: (_) => onHover(true),
      onExit: (_) => onHover(false),
      child: GestureDetector(
        onTap: onTap,
        child: Text(
          icon,
          style: TextStyle(
            color: isHovering ? Colors.orangeAccent : Colors.black,
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }

  Widget _buildLink(String title, bool isHovering, VoidCallback onTap, Function(bool) onHover) {
    return MouseRegion(
      onEnter: (_) => onHover(true),
      onExit: (_) => onHover(false),
      child: GestureDetector(
        onTap: onTap,
        child: Text(
          title,
          style: TextStyle(
            color: isHovering ? Colors.orangeAccent : Colors.black,
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }

  Widget _buildLaunchJourneySection() {
    return Container(
      padding: const EdgeInsets.all(16.0),
      alignment: Alignment.center,
      child: Column(
        children: [
          Text(
            'ÿ±ÿ≠ŸÑÿ© ÿßÿ≠ÿ™ÿ∂ÿßŸÜ ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ ÿßŸÑŸÜÿßÿ¥ÿ¶ÿ©',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.green,
            ),
          ),
          const SizedBox(height: 10),
          Text(
            'ÿ≥ÿ™ÿ≥ÿßÿπÿØŸÉ ÿ≠ÿßÿ∂ŸÜÿ©  ÿ≥ÿ™ÿßÿ±ÿ™ ÿ£ÿ® ÿπŸÑŸâ ÿ•ÿ∑ŸÑÿßŸÇ ŸÖÿ¥ÿ±ŸàÿπŸÉ ÿßŸÑŸÜÿßÿ¥ÿ¶ Ÿàÿ™ÿ≥Ÿäÿ± ŸÖÿπŸÉ ÿÆÿ∑Ÿàÿ© ÿ®ÿÆÿ∑Ÿàÿ©ÿå Ÿàÿ™ŸÇÿØŸÖ ŸÑŸÉ ÿßŸÑÿ•ÿ±ÿ¥ÿßÿØ ÿπŸÜÿØ ÿßŸÑÿ≠ÿßÿ¨ÿ©. ÿ•ŸÜ ŸÉÿßŸÜÿ™ ŸÑÿØŸäŸÉ ŸÅŸÉÿ±ÿ© ŸÖÿ¥ÿ±Ÿàÿπ ŸÜÿßÿ¥ÿ¶ ŸÑÿß ÿ™ŸÜÿ™ÿ∏ÿ±ÿå ÿßÿ®ÿØÿ£ ÿ±ÿ≠ŸÑÿ© ÿßŸÑÿßÿ≠ÿ™ÿ∂ÿßŸÜ ÿßŸÑÿ¢ŸÜ.',
            textAlign: TextAlign.center,
            style: TextStyle(
              fontWeight: FontWeight.bold,

              fontSize: 16,
              color: Colors.black,
            ),
          ),
          const SizedBox(height: 20),
          // ÿ™ŸÇŸÑŸäŸÑ ÿπÿ±ÿ∂ ÿßŸÑÿ≤ÿ±
          SizedBox(
            width: 200,
            child: ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => ProjectFormScreen()), // ÿ™ÿ∫ŸäŸäÿ± Ÿáÿ∞ÿß ÿ•ŸÑŸâ ÿßŸÑÿ¥ÿßÿ¥ÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ©
                );
              },
              style: ElevatedButton.styleFrom(
                iconColor: kPrimaryColor,
                padding: const EdgeInsets.symmetric(vertical: 12),
              ),
              child: const Text(
                'ÿßÿ®ÿØÿ£ ÿ±ÿ≠ŸÑÿ© ÿßŸÑÿßÿ≠ÿ™ÿ∂ÿßŸÜ',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 18,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFooter() {
    return Container(
      color: Colors.grey[200],
      padding: const EdgeInsets.all(16.0),
      child: Column(
        children: [
          Image.asset(
            'assets/images/image400400.png',
            height: 100,
          ),
          const SizedBox(height: 10),
          Text(
            'ŸÜÿ≠ŸÜ ŸÜÿ≠ÿ™ÿ∂ŸÜ ŸÖÿ¥ÿ±ŸàÿπŸÉ ŸÖÿ¨ÿßŸÜŸãÿßÿå ŸàŸÜŸÇÿØŸÖ ŸÑŸÉ ÿßŸÑÿ•ÿ±ÿ¥ÿßÿØÿßÿ™ÿå ÿ´ŸÖ ŸÜÿ≥ÿßÿπÿØŸÉ ŸÅŸä ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿ™ŸÖŸàŸäŸÑ.',
            textAlign: TextAlign.center,
            style: GoogleFonts.poppins(
              fontSize: 16,
              color: const Color(0xFF0A1D47),
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 20),
          Text(
            'ÿßÿ™ÿµŸÑ ÿ®ŸÜÿß\n'
                'ŸÅŸÑÿ≥ÿ∑ŸäŸÜ ‚Äì ŸÜÿßÿ®ŸÑÿ≥\n'
                'ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä: StartupsHub@gmail.com\n'
                'ÿßŸÑŸáÿßÿ™ŸÅ: 97022945845+\n'
                'ÿßŸÑŸÅÿßŸÉÿ≥: 97022946947+\n'
                'ÿ≠ŸÇŸàŸÇ ÿßŸÑÿ∑ÿ®ÿπ ŸàÿßŸÑŸÜÿ¥ÿ± ¬© 2024',
            textAlign: TextAlign.center,
            style: GoogleFonts.poppins(
              fontSize: 14,
              color: Colors.black,
            ),
          ),
          const SizedBox(height: 20),

          // ÿ£ÿ≤ÿ±ÿßÿ± ÿßŸÑÿ™ŸàÿßÿµŸÑ ÿßŸÑÿßÿ¨ÿ™ŸÖÿßÿπŸä
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              IconButton(
                icon: const Icon(FontAwesomeIcons.facebook),
                onPressed: () {
                  // ÿ±ÿßÿ®ÿ∑ ŸÅŸäÿ≥ÿ®ŸàŸÉ
                },
              ),
              IconButton(
                icon: const Icon(FontAwesomeIcons.instagram),
                onPressed: () {
                  // ÿ±ÿßÿ®ÿ∑ ÿ•ŸÜÿ≥ÿ™ÿ¨ÿ±ÿßŸÖ
                },
              ),
              IconButton(
                icon: const Icon(FontAwesomeIcons.twitter),
                onPressed: () {
                  // ÿ±ÿßÿ®ÿ∑ ÿ™ŸàŸäÿ™ÿ±
                },
              ),
              IconButton(
                icon: const Icon(FontAwesomeIcons.linkedin),
                onPressed: () {
                  // ÿ±ÿßÿ®ÿ∑ ŸÑŸäŸÜŸÉÿØÿ•ŸÜ
                },
              ),
            ],
          ),
        ],
      ),
    );
  }

  void _startSearch() {
    setState(() {
      _isSearching = true;
    });
  }

  void _stopSearch() {
    setState(() {
      _isSearching = false;
      _searchController.clear();
    });
  }
}
class ProjectFormScreen extends StatefulWidget {
  @override
  _ProjectFormScreenState createState() => _ProjectFormScreenState();
}

class _ProjectFormScreenState extends State<ProjectFormScreen> {
  final _formKey = GlobalKey<FormState>();
  String? _projectName;
  String? _projectDescription;
  String? _projectField;
  String? _projectStage;

  final List<String> stages = [
    'ŸÖÿ±ÿ≠ŸÑÿ© ÿØÿ±ÿßÿ≥ÿ© ÿßŸÑŸÅŸÉÿ±ÿ©',
    'ŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸàÿßŸÑÿ™ÿÆÿ∑Ÿäÿ∑',
    'ŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ™ŸÖŸàŸäŸÑ ŸàÿßŸÑÿ™ÿ£ŸÖŸäŸÜ',
    'ŸÖÿ±ÿ≠ŸÑÿ© ÿ™ÿ£ÿ≥Ÿäÿ≥ ÿßŸÑŸÅÿ±ŸäŸÇ ŸàÿßŸÑŸÖŸàÿßÿ±ÿØ',
    'ŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ•ÿ∑ŸÑÿßŸÇ ŸàÿßŸÑŸÜŸÖŸà',
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ŸÜŸÖŸàÿ∞ÿ¨ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ'),
        backgroundColor: Color(0xFF0A1D47),
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Container(
            width: 700, // ÿπÿ±ÿ∂ ÿßŸÑŸÖÿ≥ÿ™ÿ∑ŸäŸÑ ÿßŸÑŸÉÿ®Ÿäÿ±
            padding: const EdgeInsets.all(16.0),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(10),
              boxShadow: [
                BoxShadow(
                  color: Colors.grey.withOpacity(0.2),
                  spreadRadius: 3,
                  blurRadius: 5,
                  offset: Offset(0, 3),
                ),
              ],
            ),
            child: Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.end, // ŸÖÿ≠ÿßÿ∞ÿßÿ© ŸÑŸÑŸÜÿµŸàÿµ ŸÑŸÑŸäŸÖŸäŸÜ
                children: [
                  Align(
                    alignment: Alignment.centerRight, // ŸÖÿ≠ÿßÿ∞ÿßÿ© ÿßŸÑÿπŸÜŸàÿßŸÜ ŸÑŸÑŸäŸÖŸäŸÜ
                    child: Text(
                      'ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ',
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF0A1D47),
                      ),
                    ),
                  ),
                  const SizedBox(height: 20),
                  _buildTextField('ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ', (value) {
                    _projectName = value;
                  }),
                  const SizedBox(height: 10),
                  _buildTextField('ŸàÿµŸÅ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ', (value) {
                    _projectDescription = value;
                  }),
                  const SizedBox(height: 10),
                  _buildTextField('ŸÖÿ¨ÿßŸÑ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ', (value) {
                    _projectField = value;
                  }),
                  const SizedBox(height: 10),
                  _buildDropdownField(),
                  const SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: () {
                      if (_formKey.currentState!.validate()) {
                        // ŸáŸÜÿß ŸäŸÖŸÉŸÜŸÉ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸÜÿ∑ŸÇ ŸÑÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ£Ÿà ÿ≠ŸÅÿ∏Ÿáÿß
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑŸÜŸÖŸàÿ∞ÿ¨ ÿ®ŸÜÿ¨ÿßÿ≠')),
                        );
                      }
                      Navigator.push(
                        context,
                        MaterialPageRoute(builder: (context) => FirstStepOfJourneyScreen()),
                      );

                    },
                    child: const Text('ÿßŸÑÿ™ÿßŸÑŸä'),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTextField(String label, Function(String) onChanged) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.end, // ÿ™Ÿàÿ≤Ÿäÿπ ÿßŸÑÿπŸÜÿßÿµÿ± ŸÑŸÑŸäŸÖŸäŸÜ
      children: [
        Expanded(
          flex: 2,
          child: TextFormField(
            decoration: InputDecoration(
              border: OutlineInputBorder(),
              contentPadding: EdgeInsets.symmetric(vertical: 12),
            ),
            validator: (value) {
              if (value == null || value.isEmpty) {
                return 'Ÿäÿ±ÿ¨Ÿâ ÿ•ÿØÿÆÿßŸÑ $label';
              }
              return null;
            },
            onChanged: onChanged,
          ),
        ),
        const SizedBox(width: 10), // ŸÖÿ≥ÿßŸÅÿ© ÿ®ŸäŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿ∑ŸäŸÑ ŸàÿßŸÑÿπŸÜŸàÿßŸÜ
        Expanded(
          flex: 1,
          child: Align(
            alignment: Alignment.centerRight, // ŸÖÿ≠ÿßÿ∞ÿßÿ© ÿßŸÑŸÜÿµ ÿπŸÑŸâ ÿßŸÑŸäŸÖŸäŸÜ
            child: Text(
              label,
              style: TextStyle(fontSize: 16),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildDropdownField() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.end, // ÿ™Ÿàÿ≤Ÿäÿπ ÿßŸÑÿπŸÜÿßÿµÿ± ŸÑŸÑŸäŸÖŸäŸÜ
      children: [
        Expanded(
          flex: 2,
          child: DropdownButtonFormField<String>(
            decoration: InputDecoration(
              border: OutlineInputBorder(),
            ),
            items: stages.map((String stage) {
              return DropdownMenuItem<String>(
                value: stage,
                child: Text(stage),
              );
            }).toList(),
            onChanged: (value) {
              _projectStage = value;
            },
            validator: (value) {
              if (value == null) {
                return 'Ÿäÿ±ÿ¨Ÿâ ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©';
              }
              return null;
            },
          ),
        ),
        const SizedBox(width: 10), // ŸÖÿ≥ÿßŸÅÿ© ÿ®ŸäŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿ∑ŸäŸÑ ŸàÿßŸÑÿπŸÜŸàÿßŸÜ
        Expanded(
          flex: 1,
          child: Align(
            alignment: Alignment.centerRight, // ŸÖÿ≠ÿßÿ∞ÿßÿ© ÿßŸÑŸÜÿµ ÿπŸÑŸâ ÿßŸÑŸäŸÖŸäŸÜ
            child: Text(
              'ÿßŸÑŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©',
              style: TextStyle(fontSize: 16),
            ),
          ),
        ),
      ],
    );
  }
}